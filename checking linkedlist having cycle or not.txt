# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
#set slow and fast pointer to head
#incremen slow at 1x speed and fast at 2x speed
# if slow is same as fast cycle exist
# then move fast to head and fast and slow moves at 1x speed

class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if head is None:
            return None
        slow=head
        fast=head
        hascycle=False
        while fast!=None and fast.next!=None:
            slow=slow.next
            fast=fast.next.next
            if slow==fast:
                hascycle =True
                break
        if hascycle ==False:
            return None
        fast=head
        while slow!=fast:
            slow=slow.next
            fast=fast.next
        return slow

TC-O(N)
SC-O(1)
