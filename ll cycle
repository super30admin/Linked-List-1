// Time Complexity :O(n) 
// Space Complexity : O(1) constant
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :
end condition

// Your code here along with comments explaining your approach
/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {

        ListNode slow = head;
        ListNode fast = head;

        if(head == null)
            return head;
        boolean hasCycle = false;
        while(fast != null && fast.next != null )
        {

            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast)
            {
                hasCycle = true;
                break;
            }

        }
        if(!hasCycle)
            return null;
        slow = head;
        while(slow != fast)
        {

            slow = slow.next;
            fast = fast.next;
        }
        return slow;
    }
}
