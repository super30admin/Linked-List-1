//Time complexity: O(n)
//Space complexity: O(n)
//Accepted in Leetcode: Yes




public class Solution {
    public ListNode detectCycle(ListNode head) {
       ListNode slow = head, fast = head;
	    while(fast != null && fast.next != null) {
		fast = fast.next.next;//moves 2 places with each iteration
		slow = slow.next;//moves one place
		if (slow == fast) //cycle detected
    {
			while (head != slow) {
				head = head.next;
				slow = slow.next;
			}
			return slow;				
		}
	}			
	return null; 
    }
}
