// Time Complexity :O(N)
// Space Complexity :O(N)
// Did this code successfully run on Leetcode :Yes
// Any problem you faced while coding this : Learned new implementation for reversing LL

// Your code here along with comments explaining your approach: Idea is to use stack and using idea of head.next.next = head;

SOLUTION: Explicit STack + Internal Recursive IMplementation

class Solution {
    public ListNode reverseList(ListNode head) {
        if(head==null || head.next==null){
            return head;
        } 
        Stack<ListNode> stk = new Stack<>();     
        while(head.next!=null){
            stk.push(head);
            head = head.next;
        }
        ListNode reversed = head;
        // System.out.println(reversed.val);
        while(!stk.isEmpty()){
            head = stk.pop();
            head.next.next = head;
            head.next = null;
        }

//         ListNode reversed = reverseList(head.next);     /*RECURSIVE CALL USING INTERNAL STACK*/
//         head.next.next = head;
//         head.next = null;

        return reversed;
        
    }
}

//Approach 2: Using Pointers to traverse the LinkedList
//TC: O(N)
//SC: O(1)
 class Solution {
    public ListNode reverseList(ListNode head) {
        if(head == null){
            return null;
        }
        
        ListNode curr = head;
        ListNode prev = null;
        ListNode temp;
        
        while(curr != null){
            temp = curr.next;
            curr.next = prev ;
            prev = curr;
            curr = temp;
        }
        return prev;
    }
}
