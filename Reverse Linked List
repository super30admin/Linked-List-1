// Time Complexity : check below
// Space Complexity :check below
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no

Solution1 - Iterative
            TC - O(n) where n - total nodes of linked list 
            SC - O(1) 

    public ListNode reverseList(ListNode head) {
        if(head == null || head.next == null)
        {
            return head;
        }
        
        ListNode prev= null;
        ListNode current = head;
        ListNode fast = head.next;
        
        while(fast != null)
        {
            current.next = prev;
            prev = current;
            current = fast;
            fast = fast.next;
        }
        
        current.next = prev;
        head = current;
        return head;
    }
    
 Solution 2 - Recursive
              TC - O(n) where n - total nodes of linked list 
              SC - O(n) where n - total nodes of linked list 
 
 /**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        if(head == null || head.next == null)
            return head;
        
        ListNode reversed = reverseList(head.next);
        head.next.next = head;
        head.next = null;
        return reversed;
    }
}
