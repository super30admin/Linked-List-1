# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectintersection(self,slow,fast):
        while(fast and fast.next):
            slow=slow.next;
            fast=fast.next.next;
            if(slow==fast):
                return slow;
        return None
        
       
    def detectCycle(self, head: ListNode) -> ListNode:
        if(not head or not head.next):
            return None;
        
        intersect=self.detectintersection(head,head);
        if(not intersect):
            return None;
        curr1=intersect;
        curr2=head;
        while(curr1!=curr2):
            curr1=curr1.next;
            curr2=curr2.next;
        return curr1
        
        
