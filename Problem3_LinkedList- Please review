// Time Complexity :O(2n)
// Space Complexity :O(1)
// Did this code successfully run on Leetcode :Yes



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public var val: Int
 *     public var next: ListNode?
 *     public init(_ val: Int) {
 *         self.val = val
 *         self.next = nil
 *     }
 * }
 */

class Solution {
    func detectCycle(_ head: ListNode?) -> ListNode? {
        if head == nil || head?.next == nil {
            return nil
        }
        
        var slow = head
        var fast = head
        var start = head
        
        while fast?.next != nil && fast?.next?.next != nil {
            slow = slow?.next
            fast = fast?.next?.next
            
            if slow === fast {
                while !(slow === start) {
                    slow = slow?.next
                    start = start?.next
                }
                return start
            }
        }
        
        return nil
    }
}
