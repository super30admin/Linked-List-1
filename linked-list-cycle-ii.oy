# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
# time complexity: o(n)
#space complexity: o(1)
class Solution(object):
    def getIntersect(self, head):
        sp = head
        fp = head
        while fp is not None and fp.next is not None:
            sp = sp.next
            fp = fp.next.next
            if sp == fp:
                return fp
        return None

    def detectCycle(self, head):
        if head is None:
            return None
        intersect = self.getIntersect(head)
        if intersect is None:
            return None
        ptr1 = head
        ptr2 = intersect
        while ptr1 != ptr2:
            ptr1 = ptr1.next
            ptr2 = ptr2.next
        return ptr1
