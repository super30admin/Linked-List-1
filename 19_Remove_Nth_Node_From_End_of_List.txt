// Time Complexity : o( n)
// Space Complexity : o(1)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach
/*
*  create a node prev
*  Find n th node to delete.
*  connect prev to node.next
* */

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode prev = new ListNode(-1);
        prev.next = head;

        ListNode res = prev;
        ListNode fast = head;
        for(int i = 0; i< n; i++){
            fast = fast.next;
        }

        while(fast!=null){
            fast = fast.next;
            prev = head;
            head = head.next;
        }
        prev.next = head.next;
        return res.next;
    }


}