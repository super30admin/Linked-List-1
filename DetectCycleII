// Time Complexity: O(n)
// Space Complexity: O(1)

/*
Algorithm: Best explanation : taken from leetcode discuss
Assume the distance from head to the start of the loop is x1
        the distance from the start of the loop to the point fast and slow meet is x2
        the distance from the point fast and slow meet to the start of the loop is x3
        What is the distance fast moved? What is the distance slow moved? And their relationship?

        x1 + x2 + x3 + x2
        x1 + x2
        x1 + x2 + x3 + x2 = 2 (x1 + x2)
        Thus x1 = x3
*/

public class Solution {
    public ListNode detectCycle(ListNode head) {

        boolean flag = false;

        ListNode slow = head;
        ListNode fast = head;

        while(fast != null && fast.next!=null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast){
                flag = true;
                break;
            }

        }
        if(!flag) return null;

        slow = head;

        while(slow != fast){
            slow = slow.next;
            fast = fast.next;
        }
        return slow; // or fast as they are at the same point.

    }
}
