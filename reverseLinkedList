//tc:O(n)
//sc: O(1)
//passed all testcases on leetcode: yes
class Solution {
    public ListNode reverseList(ListNode head) {
    ListNode prev = null;
    ListNode curr = head;
    //Pointing the curr.next to prev to reverse the order
    while (curr != null) {
        ListNode nextnode = curr.next;
        curr.next = prev;
        prev = curr;
        curr = nextnode;
        }
    return prev;
    }
} */

//Using Recursion
//tc:O(n)
//sc: O(n)
//passed all testcases on leetcode: yes
class Solution {
    public ListNode reverseList(ListNode head) {
        if (head == null || head.next ==null) return head;
        ListNode reversed = null;
        reversed = reverseList(head.next); //reversed will be 5, 5 will not go in to the stack since it's baby is null, and we are terminating on null, so it won't be actually at null
        //st.pop -- gives head -- 4
        head.next.next = head;
        head.next = null;
        return reversed;
    
    }
}

