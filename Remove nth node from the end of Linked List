// Time Complexity : O(N)
// Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

// Your code here along with comments explaining your approach: Idea is to use two pointer technique and mseperate them by n counts.
//EDGE CASE: removing the first element i.e last element from last -> check if fast @null -> remove first else move fast to next;

SOLUTION:

class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head==null || head.next==null){
            return null;
        }
        
        ListNode fast = head;
        ListNode slow = head;
        while(n>0){
            fast = fast.next;
            n--;
        }
        /*Edge CASE*/
        if(fast==null){
            return slow.next;
        }
        
        fast = fast.next;

        while(fast!=null){
            fast = fast.next;
            slow = slow.next;
        }
        slow.next = slow.next.next;
        return head;
    }
}
